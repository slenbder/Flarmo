//
//  NotificationService.swift
//  Flarmo
//
//  Created by –ö–∏—Ä–∏–ª–ª –ú–∞—Ä—å—è—Å–æ–≤ on 9/3/25.
//

import Foundation
import UserNotifications

class NotificationService: NSObject, UNUserNotificationCenterDelegate {
    static let shared = NotificationService()
    private let center = UNUserNotificationCenter.current()
    
    private override init() {
        super.init()
        center.delegate = self
        registerCategories() // –≤–∞–∂–Ω–æ: —ç–∫—à–µ–Ω—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    }
    
    // MARK: - Permissions
    
    func requestPermission(completion: @escaping (Bool) -> Void) {
        center.requestAuthorization(options: [.alert, .sound, .badge]) { granted, error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: \(error)")
            }
            DispatchQueue.main.async {
                completion(granted)
            }
        }
    }
    
    // MARK: - Categories

    func registerCategories() {
        let snooze = UNNotificationAction(
            identifier: "ALARM_SNOOZE",
            title: "–û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 10 –º–∏–Ω",
            options: []
        )
        let stop = UNNotificationAction(
            identifier: "ALARM_STOP",
            title: "–í—ã–∫–ª—é—á–∏—Ç—å",
            options: [.destructive]
        )

        let category = UNNotificationCategory(
            identifier: "ALARM_ACTIONS",
            actions: [snooze, stop],
            intentIdentifiers: [],
            options: [.customDismissAction]
        )

        center.setNotificationCategories([category])
    }
    
    // MARK: - Debug / Test
    /// –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ pending-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ `sched_...` (–¥–æ —ç—Ç–∞–ø–∞ E)
    func removeLegacyPending(completion: (() -> Void)? = nil) {
        center.getPendingNotificationRequests { [weak self] reqs in
            let legacy = reqs.map(\.identifier).filter { $0.hasPrefix("sched_") }
            if !legacy.isEmpty {
                self?.center.removePendingNotificationRequests(withIdentifiers: legacy)
                print("[NotificationService] Removed legacy pending: \(legacy.count)")
            } else {
                print("[NotificationService] No legacy pending found")
            }
            completion?()
        }
    }
    
    func listScheduledNotifications() {
        center.getPendingNotificationRequests { requests in
            print("üìã –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: \(requests.count)")
            for req in requests {
                print("‚Äî \(req.identifier): \(req.content.body)")
            }
        }
    }
    
    func scheduleTestNotification() {
        let content = UNMutableNotificationContent()
        content.title = "–¢–µ—Å—Ç–æ–≤—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫"
        content.body = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è!"
        content.sound = .default
        
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 10, repeats: false)
        let request = UNNotificationRequest(identifier: "test_alarm", content: content, trigger: trigger)
        
        center.add(request) { error in
            if let error = error {
                print("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(error)")
            } else {
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ (—á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥)")
            }
        }
    }
    
    // MARK: - UNUserNotificationCenterDelegate

    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ (–±–∞–Ω–Ω–µ—Ä + –∑–≤—É–∫ + –≤ —Å–ø–∏—Å–æ–∫)
    func userNotificationCenter(_ center: UNUserNotificationCenter,
                                willPresent notification: UNNotification,
                                withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        completionHandler([.banner, .sound, .list])
    }
    
    // –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
    func userNotificationCenter(_ center: UNUserNotificationCenter,
                                didReceive response: UNNotificationResponse,
                                withCompletionHandler completionHandler: @escaping () -> Void) {

        let req = response.notification.request

        switch response.actionIdentifier {
        case "ALARM_SNOOZE":
            // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å—Ç–∞–≤–∏–º –ø—É—à –Ω–∞ +10 –º–∏–Ω—É—Ç
            let newContent = (req.content.mutableCopy() as? UNMutableNotificationContent) ?? UNMutableNotificationContent()
            newContent.title = req.content.title
            newContent.body = req.content.body
            newContent.sound = .default
            newContent.categoryIdentifier = "ALARM_ACTIONS"

            let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 10 * 60, repeats: false)
            let newId = req.identifier + "_snooze_" + String(Int(Date().timeIntervalSince1970))
            let newReq = UNNotificationRequest(identifier: newId, content: newContent, trigger: trigger)
            center.add(newReq) { error in
                if let error = error {
                    print("‚ùå Snooze add error: \(error)")
                } else {
                    print("‚è∞ Snoozed +10m ‚Üí id=\(newId)")
                }
            }

        case "ALARM_STOP":
            // –£–¥–∞–ª—è–µ–º –±—É–¥—É—â–∏–µ pending –¥–ª—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ id
            center.removePendingNotificationRequests(withIdentifiers: [req.identifier])
            print("üõë Stopped pending id=\(req.identifier)")

        default:
            break
        }

        // –ª–æ–≥ –æ—Ç–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        print("üëâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: \(req.identifier)")
        completionHandler()
    }
}
